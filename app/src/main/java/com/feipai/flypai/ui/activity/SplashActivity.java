package com.feipai.flypai.ui.activity;import android.content.ActivityNotFoundException;import android.content.Intent;import android.net.Uri;import android.os.Build;import android.os.Handler;import android.provider.Settings;import android.support.annotation.RequiresApi;import android.os.Bundle;import android.view.View;import com.feipai.flypai.R;import com.feipai.flypai.base.BaseSimpleActivity;import com.feipai.flypai.base.basedialog.BaseDialog;import com.feipai.flypai.utils.AppStatusManager;import com.feipai.flypai.utils.global.IntentUtils;import com.feipai.flypai.utils.global.LogUtils;import com.feipai.flypai.utils.global.NetworkUtils;import com.feipai.flypai.utils.global.PermissionUtils;import com.zhy.autolayout.utils.AutoUtils;public class SplashActivity extends BaseSimpleActivity implements PermissionUtils.PermissionCallBack {    private final int SPLASH_DISPLAY_LENGHT = 2000; // 延迟三秒    private boolean chackPermission = false;    private static final int PERMISSION_CODE = 999;    private Handler handler;    private PermissionUtils mPermissionUtils;    private BaseDialog mDialog;    @Override    protected int initLayout() {        AppStatusManager.getInstance().setAppStatus(AppStatusManager.STATUS_NORMAL);        return R.layout.activity_splash;    }    @Override    protected void initWindow() {        super.initWindow();    }    @Override    protected void initData(Bundle savedInstanceState) {        super.initData(savedInstanceState);        handler = new Handler();        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {            toMain();        } else {            checkPermission();        }    }    /**     * 权限请求     */    private void checkPermission() {        mPermissionUtils = mPermissionUtils.getInstance();        mPermissionUtils.requestPermissions(this, PERMISSION_CODE, this);    }    private void toMain() {        if (!NetworkUtils.isGpsOpen() && NetworkUtils.getCurConnetWifiName() != null && NetworkUtils.getCurConnetWifiName().contains("unknown ssid")) {            setPermissionDialog(false, true);        } else {            handler.postDelayed(runnable, SPLASH_DISPLAY_LENGHT);        }    }    private Runnable runnable = new Runnable() {        @Override        public void run() {            Intent mainIntent = new Intent();            mainIntent.setClass(SplashActivity.this, MainActivity.class);            SplashActivity.this.startActivity(mainIntent);            SplashActivity.this.finish();        }    };    @Override    protected void onDestroy() {        super.onDestroy();        handler.removeCallbacks(runnable);    }    // 权限申请提示框    private void setPermissionDialog(boolean isSystemLevel, boolean openGps) {        if (mDialog == null) {            mDialog = new BaseDialog.Builder(SplashActivity.this)                    .setContentView(R.layout.base_dialog)                    .setWidthAndHeight(AutoUtils.getPercentHeightSize(672), AutoUtils.getPercentHeightSize(408))                    .setText(R.id.base_dialog_title, getResources().getString(R.string.prompt))                    .setText(R.id.base_dialog_content, getResources().getString(openGps ? R.string.gps_dont_open_hint :                            R.string.permission_not_open))                    .setText(R.id.confirm_tv, getResources().getString(R.string.go_to_settings))                    .setText(R.id.cancel_tv, getResources().getString(R.string.end))                    .setOnClickListener(R.id.confirm_tv, new View.OnClickListener() {                        @Override                        public void onClick(View v) {                            mDialog.dismiss();                            chackPermission = true;                            if (openGps) {                                IntentUtils.openGPSSettings(SplashActivity.this);                            } else {                                if (isSystemLevel) {                                    try {                                        Intent intent = new Intent(Settings.ACTION_MANAGE_WRITE_SETTINGS,                                                Uri.parse("package:" + getPackageName()));                                        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);                                        startActivity(intent);                                    } catch (ActivityNotFoundException e) {                                        LogUtils.d("部分手机会报这个错误!");                                        toMain();                                    }                                } else {                                    Uri packageURI = Uri.parse("package:" + getPackageName());                                    Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS, packageURI);                                    startActivity(intent);                                }                            }                        }                    })                    .setOnClickListener(R.id.cancel_tv, new View.OnClickListener() {                        @Override                        public void onClick(View v) {                            mDialog.dismiss();                            SplashActivity.this.finish();                        }                    })                    .create();            mDialog.setCancelable(false);        }        if (!mDialog.isShowing()) {            mDialog.show();        }    }    @Override    protected void onResume() {        super.onResume();        if (chackPermission) {            checkPermission();            chackPermission = false;        }    }    //=====权限回调状态===    /** 权限申请成功     * */    @Override    public void onPermissionSuccess() {        toMain();    }    /**     * 权限申请失败!     * */    @Override    public void onPermissionReject(boolean isSystemLevel, String strMessage) {        setPermissionDialog(isSystemLevel, false);    }    /**     * 权限申请失败!     * */    @Override    public void onPermissionFail() {        mPermissionUtils.requestPermissions(this, PERMISSION_CODE, this);    }    /**     * 申请权限回调方法     */    @RequiresApi(api = Build.VERSION_CODES.M)    @Override    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {        mPermissionUtils.requestResult(this, permissions, grantResults, this);    }}